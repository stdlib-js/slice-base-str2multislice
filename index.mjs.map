{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport trim from '@stdlib/string-base-trim';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport MultiSlice from '@stdlib/slice-multi';\n\n\n// VARIABLES //\n\nvar PREFIX = 'MultiSlice(';\n\n/**\n* Regular expression matching the argument separator.\n*\n* @private\n* @name RE_SEP\n* @type {RegExp}\n*/\nvar RE_SEP = /\\s*,\\s*/;\n\n/**\n* Regular expression matching an integer value.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// MAIN //\n\n/**\n* Parses a string-serialized MultiSlice object.\n*\n* ## Notes\n*\n* -   The function returns `null` if provided an invalid string.\n*\n* @param {string} str - input string\n* @returns {(MultiSlice|null)} MultiSlice object (or null)\n*\n* @example\n* var s = str2multislice( 'MultiSlice(null,null,null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ null, null, null ]\n*\n* @example\n* var s = str2multislice( 'MultiSlice(10,Slice(0,10,1),null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ 10, <Slice>, null ]\n*\n* @example\n* var s = str2multislice( 'MultiSlice(foo,bar)' );\n* // returns null\n*/\nfunction str2multislice( str ) {\n\tvar args;\n\tvar arg;\n\tvar n;\n\tvar v;\n\tvar i;\n\tif ( str.substring( 0, PREFIX.length ) !== PREFIX ) {\n\t\treturn null;\n\t}\n\tn = str.length - 1;\n\tif ( str[ n ] !== ')' ) {\n\t\treturn null;\n\t}\n\tstr = trim( str.substring( PREFIX.length, n ) );\n\tstr = str.split( RE_SEP );\n\tn = str.length;\n\n\t// Check for an empty slice (i.e., `MultiSlice()`)...\n\tif ( n === 1 && str[ 0 ] === '' ) {\n\t\treturn new MultiSlice();\n\t}\n\targs = [];\n\tfor ( i = 0; i < n; i++ ) {\n\t\tv = str[ i ];\n\t\tif ( v[ 0 ] === 'S' ) {\n\t\t\tv = str.slice( i, i+3 ).join( ',' );\n\t\t\targ = str2slice( v );\n\t\t\tif ( arg === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ti += 2; // skip over the `Slice(...)` arguments\n\t\t} else if ( v === 'null' ) {\n\t\t\targ = null;\n\t\t} else if ( RE_INTEGER.test( v ) ) {\n\t\t\targ = parseInt( v, 10 );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\targs.push( arg );\n\t}\n\treturn MultiSlice.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default str2multislice;\n"],"names":["RE_SEP","RE_INTEGER","str2multislice","str","args","arg","n","v","i","substring","length","trim","split","MultiSlice","slice","join","str2slice","test","parseInt","push","apply"],"mappings":";;kQA6BA,IASIA,EAAS,UASTC,EAAa,aAiCjB,SAASC,EAAgBC,GACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACJ,GAzDY,gBAyDPL,EAAIM,UAAW,EAzDR,cAyDkBC,QAC7B,OAAO,KAGR,GAAkB,MAAbP,EADLG,EAAIH,EAAIO,OAAS,GAEhB,OAAO,KAOR,GAAW,KAHXJ,GADAH,GADAA,EAAMQ,EAAMR,EAAIM,UAhEJ,cAgEsBC,OAAQJ,KAChCM,MAAOZ,IACTU,SAGqB,KAAbP,EAAK,GACpB,OAAO,IAAIU,EAGZ,IADAT,EAAO,GACDI,EAAI,EAAGA,EAAIF,EAAGE,IAAM,CAEzB,GAAgB,OADhBD,EAAIJ,EAAKK,IACD,GAAc,CAGrB,GAFAD,EAAIJ,EAAIW,MAAON,EAAGA,EAAE,GAAIO,KAAM,KAEjB,QADbV,EAAMW,EAAWT,IAEhB,OAAO,KAERC,GAAK,CACR,MAAS,GAAW,SAAND,EACXF,EAAM,SACA,KAAKJ,EAAWgB,KAAMV,GAG5B,OAAO,KAFPF,EAAMa,SAAUX,EAAG,GAGnB,CACDH,EAAKe,KAAMd,EACX,CACD,OAAOQ,EAAWO,MAAO,KAAMhB,EAChC"}