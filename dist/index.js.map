{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar args2multislice = require( '@stdlib/slice-base-args2multislice' );\n\n\n// VARIABLES //\n\nvar PREFIX = 'MultiSlice(';\n\n/**\n* Regular expression matching the argument separator.\n*\n* @private\n* @name RE_SEP\n* @type {RegExp}\n*/\nvar RE_SEP = /\\s*,\\s*/;\n\n/**\n* Regular expression matching an integer value.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// MAIN //\n\n/**\n* Parses a string-serialized MultiSlice object.\n*\n* ## Notes\n*\n* -   The function returns `null` if provided an invalid string.\n*\n* @param {string} str - input string\n* @returns {(MultiSlice|null)} MultiSlice object (or null)\n*\n* @example\n* var s = str2multislice( 'MultiSlice(null,null,null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ null, null, null ]\n*\n* @example\n* var s = str2multislice( 'MultiSlice(10,Slice(0,10,1),null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ 10, <Slice>, null ]\n*\n* @example\n* var s = str2multislice( 'MultiSlice(foo,bar)' );\n* // returns null\n*/\nfunction str2multislice( str ) {\n\tvar args;\n\tvar arg;\n\tvar n;\n\tvar v;\n\tvar i;\n\tif ( str.substring( 0, PREFIX.length ) !== PREFIX ) {\n\t\treturn null;\n\t}\n\tn = str.length - 1;\n\tif ( str[ n ] !== ')' ) {\n\t\treturn null;\n\t}\n\tstr = trim( str.substring( PREFIX.length, n ) );\n\tstr = str.split( RE_SEP );\n\tn = str.length;\n\n\t// Check for an empty slice (i.e., `MultiSlice()`)...\n\tif ( n === 1 && str[ 0 ] === '' ) {\n\t\treturn new MultiSlice();\n\t}\n\targs = [];\n\tfor ( i = 0; i < n; i++ ) {\n\t\tv = str[ i ];\n\t\tif ( v[ 0 ] === 'S' ) {\n\t\t\tv = str.slice( i, i+3 ).join( ',' );\n\t\t\targ = str2slice( v );\n\t\t\tif ( arg === null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\ti += 2; // skip over the `Slice(...)` arguments\n\t\t} else if ( v === 'null' ) {\n\t\t\targ = null;\n\t\t} else if ( RE_INTEGER.test( v ) ) {\n\t\t\targ = parseInt( v, 10 );\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\targs.push( arg );\n\t}\n\treturn args2multislice( args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = str2multislice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Parse a string-serialized MultiSlice object.\n*\n* @module @stdlib/slice-base-str2multislice\n*\n* @example\n* var str2multislice = require( '@stdlib/slice-base-str2multislice' );\n*\n* var s = str2multislice( 'MultiSlice(null,null,null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ null, null, null ]\n*\n* @example\n* var str2multislice = require( '@stdlib/slice-base-str2multislice' );\n*\n* var s = str2multislice( 'MultiSlice(10,Slice(0,10,1),null)' );\n* // returns <MultiSlice>\n*\n* var v = s.data;\n* // returns [ 10, <Slice>, null ]\n*\n* @example\n* var str2multislice = require( '@stdlib/slice-base-str2multislice' );\n*\n* var s = str2multislice( 'MultiSlice(foo,bar)' );\n* // returns null\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,0BAA2B,EAC3CC,EAAY,QAAS,8BAA+B,EACpDC,EAAa,QAAS,qBAAsB,EAC5CC,EAAkB,QAAS,oCAAqC,EAKhEC,EAAS,cASTC,EAAS,UASTC,EAAa,aAiCjB,SAASC,EAAgBC,EAAM,CAC9B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAKJ,GAJKL,EAAI,UAAW,EAAGJ,EAAO,MAAO,IAAMA,IAG3CO,EAAIH,EAAI,OAAS,EACZA,EAAKG,CAAE,IAAM,KACjB,OAAO,KAOR,GALAH,EAAMR,EAAMQ,EAAI,UAAWJ,EAAO,OAAQO,CAAE,CAAE,EAC9CH,EAAMA,EAAI,MAAOH,CAAO,EACxBM,EAAIH,EAAI,OAGHG,IAAM,GAAKH,EAAK,CAAE,IAAM,GAC5B,OAAO,IAAIN,EAGZ,IADAO,EAAO,CAAC,EACFI,EAAI,EAAGA,EAAIF,EAAGE,IAAM,CAEzB,GADAD,EAAIJ,EAAKK,CAAE,EACND,EAAG,CAAE,IAAM,IAAM,CAGrB,GAFAA,EAAIJ,EAAI,MAAOK,EAAGA,EAAE,CAAE,EAAE,KAAM,GAAI,EAClCH,EAAMT,EAAWW,CAAE,EACdF,IAAQ,KACZ,OAAO,KAERG,GAAK,CACN,SAAYD,IAAM,OACjBF,EAAM,aACKJ,EAAW,KAAMM,CAAE,EAC9BF,EAAM,SAAUE,EAAG,EAAG,MAEtB,QAAO,KAERH,EAAK,KAAMC,CAAI,CAChB,CACA,OAAOP,EAAiBM,CAAK,CAC9B,CAKAV,EAAO,QAAUQ,IC3EjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "trim", "str2slice", "MultiSlice", "args2multislice", "PREFIX", "RE_SEP", "RE_INTEGER", "str2multislice", "str", "args", "arg", "n", "v", "i", "main"]
}
